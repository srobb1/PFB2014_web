Perl VI Problem Set
====================

1.  Write a program named "pali.pl" to detect palindromes. It must be able to handle changes in case.


2. Modify the program to work even if there is extraneous punctuation  (Hint:s///):
 
% pali.pl "A man, a plan, a canal... Panama"
 yes!

% pali.pl "Madam in Eden Im Adam"
yes!
 
% pali.pl gatcctag
yes!
 
% pali.pl "cold spring harbor laboratory"
no!

#!/usr/bin/perl                                                                                                                                    
#PerlVI_Prob-1-2.pl

use strict;
use warnings;

## get the string argument                                                                                                                          
my $string = shift;

## lowercase $string so that comparisons are case insensitive                                                                                  
my $lower_case_string = lc $string;

## remove whitespace from the string                                                                                                                
## we want to apply the substitution globally to remove ALL occurences    
my $lower_case_clean_string = $lower_case_string;
$lower_case_clean_string =~ s/\s//g;


## we can remove all non alphanumerical characters                                                                                                  
$lower_case_clean_string =~ s/\W//g;

## get the reverse of the string                                                                                                                    
my $reverse_lower_case_clean_string = reverse $lower_case_clean_string;

## check that forward and reverse strings are the same - if they're the same, we have a palindrome                                                  
if ($lower_case_clean_string eq $reverse_lower_case_clean_string) {
  print "yes!\n";
}

## otherwise the strings aren't the same                                                                                                            
else {
print "no!\n";
}

 
 
3. In the Nobody.txt file substitute every occurrence of 'Nobody' with your favorite person's name and save the file as YourFavoritePersonName.txt (ex. Michael.txt).


#!usr/bin/perl
#PerlVI_Prob-3.pl                                                                                                                             


open (IN, '<', 'Nobody.txt') || die "Can't open infile $!";
open (OUT, '>', 'Clovis.txt') || die "Can't open outfile $!";

while (my $line = <IN>){
      chomp $line;
      $line =~ s/Nobody/Clovis/g;
      print OUT $line,"\n";
}

close(IN);
close(OUT);



4. Find all the lines in a FASTA file that are the header (>seqName desc) using pattern matching.

5. If a line matches the format of a FASTA header, extract the sequence name and description using sub patterns as well as $1 and $2. 
   - Print id:"extracted seq name" desc:"extracted description"

#!/usr/bin/perl
#PerlVI_Probs_4-5                                                                                                                            

use warnings;
use strict;


my $file = shift @ARGV;
open(IN,'<',$file) or die "Can't open $file: $!\n";
while ( my $line = <IN>)
  {
  chomp $line;
## ^ character refers to the beginning of the line                                                                                                
  if ($line =~ /^>(\S+)(.*)/){
    my $id = $1;
    my $desc = $2;
    #Perl knows what values belong to $1 and $2                                                                                             
print "id: $1  desc: $2\n";
 }
}

close(IN);




6. Create or modify your FASTA parser to use regular expressions. Also make sure your parser can deal with a sequence that is split over many lines.

#!/usr/bin/perl                                                                                                                                    
#Perl_VI_Prob-6

use warnings;
use strict;
use Data::Dumper;

my $file = shift @ARGV;
my %Sequences; # Hash to store sequences using their IDs as keys                                                                             
my $id;

open(IN,'<',$file) or die "Can't open $file: $!\n";
while ( my $line = <IN>)
{
  chomp $line;
  ## ^ character refers to the beginning of the line                                                                                         
if($line =~ m/^>/)
  {
    $line =~ m/(.+?) (.+)/;
    $id = $1;
    print "id: $1 desc: $2\n";
  }
  else
  {
    $Sequences{$id} .= $line; # Set the sequence to the key $id in the Sequences hash                                                       
 
  }
}
close(IN);

print Dumper \%Sequences;



7.The enzyme ApoI has a restriction site: R^AATTY where R and Y are degenerate
nucleotideides. See the IUPAC table to identify the nucleotide possibilities
for the R and Y.

Write a regular expression that will match occurrences of the site in a sequence. (hint: what are you going to do about the actual cut site, represented by the '^'?)
                                               
#R: A or G [AG]                                                      
#Y: C or T [CT]                                                      

#!/usr/bin/perl
#PerlV_Prob-7.pl

use warnings;
use strict;

my $in = shift @ARGV;
my $sequence;

open(IN,'<',$in) or die "Can't open $in: $!\n";
while( my $line = <IN>)
{
  chomp $line;
  if ($line !~ m/^>/)
  {
    $sequence .= $line;
  }
}
close(IN);

print $sequence,"\n";

my @cut_sites = $sequence =~ m/([AG]AATT[CT])/g;

print "@cut_sites\n";



8. Use the regular expression you just wrote to find all the restriction sites in the following sequence. Be sure to think about how to handle the newlines!

GAATTCAAGTTCTTGTGCGCACACAAATCCAATAAAAACTATTGTGCACACAGACGCGAC
TTCGCGGTCTCGCTTGTTCTTGTTGTATTCGTATTTTCATTTCTCGTTCTGTTTCTACTT
AACAATGTGGTGATAATATAAAAAATAAAGCAATTCAAAAGTGTATGACTTAATTAATGA
GCGATTTTTTTTTTGAAATCAAATTTTTGGAACATTTTTTTTAAATTCAAATTTTGGCGA
AAATTCAATATCGGTTCTACTATCCATAATATAATTCATCAGGAATACATCTTCAAAGGC
AAACGGTGACAACAAAATTCAGGCAATTCAGGCAAATACCGAATGACCAGCTTGGTTATC
AATTCTAGAATTTGTTTTTTGGTTTTTATTTATCATTGTAAATAAGACAAACATTTGTTC
CTAGTAAAGAATGTAACACCAGAAGTCACGTAAAATGGTGTCCCCATTGTTTAAACGGTT
GTTGGGACCAATGGAGTTCGTGGTAACAGTACATCTTTCCCCTTGAATTTGCCATTCAAA
ATTTGCGGTGGAATACCTAACAAATCCAGTGAATTTAAGAATTGCGATGGGTAATTGACA
TGAATTCCAAGGTCAAATGCTAAGAGATAGTTTAATTTATGTTTGAGACAATCAATTCCC
CAATTTTTCTAAGACTTCAATCAATCTCTTAGAATCCGCCTCTGGAGGTGCACTCAGCCG
CACGTCGGGCTCACCAAATATGTTGGGGTTGTCGGTGAACTCGAATAGAAATTATTGTCG
CCTCCATCTTCATGGCCGTGAAATCGGCTCGCTGACGGGCTTCTCGCGCTGGATTTTTTC
ACTATTTTTGAATACATCATTAACGCAATATATATATATATATATTTAT


#!/usr/bin/perl                                                                                                   
#PerlVI_prob-8.pl

use warnings;
use strict;

my $infile = 'sequence.txt';
my $seq;

open (IN, '<', $infile) || die "Cannot open infile $!";

while( my $line = <IN>)
  {
  chomp $line;
  if ($line !~ m/^>/)
    {
    $seq .= $line;
  }
}
close(IN);
print $seq,"\n";
my @cut_sites = $seq =~ m/([AG]AATT[CT])/g;

print "@cut_sites\n";




9. Determine the site(s) of the cut in the above sequence. Print out the sequence with "^" at the cut site.

Hints:
Use subpatterns (parentheses and $1, $2) to find the cut site within the pattern.
Use s///

Example: if the pattern is GACGT^CT the following sequence

AAAAAAAAGACGTCTTTTTTTAAAAAAAAGACGTCTTTTTTT

would be cut like this:

AAAAAAAAGACGT^CTTTTTTTAAAAAAAAGACGT^CTTTTTTT


#!/usr/bin/perl                                                                                                                                     
#Perl_VI_Prob-9
#######################
# R: A or G [AG]                                                                                                                                 
# Y: C or T [CT]
#######################                                                                                                                       

use warnings;
use strict;

my $in = shift @ARGV;
my $seq = "";
open(IN,'<',$in) or die "Can't open $in: $!\n";
while( my $line = <IN>)
{
  chomp $line;
  if ($line !~ m/^>/)
  {
    $seq .= $line;
  }
}
close(IN);

## Original seq                                                                                                                                

print "Original\n";
print "$seq\n";
print "\n\n";

## Regular expression: matching and substitution                                                                                             

$seq =~ s/([AG])(AATT[CT])/$1\^$2/g;

## Modified seq                                                                                                                             
print "Modified\n";
print $seq,"\n";





10. Now that you've done your restriction digest, determine the lengths of your fragments and sort them by length (in the same order they would separate on an electrophoresis gel).

    Hint: take a look at the split man page or think about storing your matches in an array. With one of these two approaches you should be able to convert this string:

       AAAAAAAAGACGT^CTTTTTTTAAAAAAAAGACGT^CTTTTTTT


    into this array:

    ("AAAAAAAAGACGT","CTTTTTTTAAAAAAAAGACGT","CTTTTTTT")


#!/usr/bin/perl                                                                                                                             

#Perl_VI_Problem-10                                                                                                                               
#######################                                                                                                                     
# R: A or G [AG]                                                                                                                         
# Y: C or T [CT]                                                                                                                           
#######################                                                                                                                      

use warnings;
use strict;

my $in = shift @ARGV;
my $seq = "";
open(IN,'<',$in) or die "Can't open $in: $!\n";
while( my $line = <IN>)
{
  chomp $line;
  if ($line !~ m/^>/)
  {
    $seq .= $line;
  }
}
close(IN);
## Original seq                                                                                                                              

print "Original\n";
print "$seq\n";
print "\n\n";

## Regular expression: matching and substitution                                                                                           
$seq =~ s/([AG])(AATT[CT])/$1\^$2/g;

## Modified seq                                                                                                                            
print "Modified\n";
print $seq,"\n";

## Split it to an array & sort based on length                                                                                             
print "Fragments\n";
my @fragments = sort {length($b) <=> length($a)} split(/\^/,$seq);
print join("\n",@fragments),"\n";



EXTRA CREDIT:
1. Use the data file from rebase.neb.com (http://rebase.neb.com/rebase/link_bionet) to fill a hash of enzymes, their recognition patterns
2. Ask a user for the designed enzyme, then cut their supplied sequence, returning the number of fragments, the fragments in their natural order (unsorted), and finally sorted from biggest to smallest fragment.